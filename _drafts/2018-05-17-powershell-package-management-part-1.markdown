---
layout: post
title: "Powershell Package Management Part 1"
date: "2018-05-17 21:39:27 +0200"
---
Managing Powershell Modules with nuget.

# Introduction

Powershell Package Management is damn useful especially when deploying Modules
within a company to ensure your coworkers can use your awesome work :)

The Challenge is in keeping all those new Features (Security and other) up to date.

Powershell comes with an build-in package manager. The Module for this is `PowershellGet`

%{%- highlight Powershell -%}
PS> Get-Command -Module PowershellGet | Select-Object -ExpandProperty Name |`
  Format-Wide {$_ } -Force -Column 2

Find-Command                   Find-DscResource
Find-Module                    Find-RoleCapability
Find-Script                    Get-InstalledModule
Get-InstalledScript            Get-PSRepository
Install-Module                 Install-Script
New-ScriptFileInfo             Publish-Module
Publish-Script                 Register-PSRepository
Save-Module                    Save-Script
Set-PSRepository               Test-ScriptFileInfo
Uninstall-Module               Uninstall-Script
Unregister-PSRepository        Update-Module
Update-ModuleManifest          Update-Script
Update-ScriptFileInfo
{%- endhighlight -%}

The most important Command to start with are `Get-PSRepository` and `Install-Module`

## PSRepository

PSRepositories are nuget based (at leased the ones I'm going to care about) based
Repositories containing useful Powershell Modules and Scripts.

The biggest repository is the [PowershellGallery][psgallery]. This is also the
default repository and can be reinstalled with `Register-PSRepository -Default`
since WMF 5.1.

Before that this script does the trick:

{% gist guitarrapc/79d31b8cd02649075642b77c4ae796ab %}

`Get-PSRepository` show all Registered Repositories:

{%- highlight Powershell -%}
PS> Get-PSRepository

Name                      InstallationPolicy   SourceLocation                                                                                                                                              
----                      ------------------   --------------                                                                                                                                              
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2/
{%- endhighlight -%}

After ensuring that there is a repository you can install a module with `Install-Module`

## Installing Modules

Installing Modules is pretty straightforward. There are a few locations in which
Modules will be installed by default. In my case on my Mac with Powershell Core 6.0
installed thes are those locations:

{%- highlight powershell -%}
PS> $env:PSModulePath -split ":"

/Users/jschpp/.local/share/powershell/Modules
/usr/local/share/powershell/Modules
/usr/local/microsoft/powershell/6.0.0-rc/Modules
{%- endhighlight -%}

You can always read the contents of `$env:PSModulePath` yourself to get those locations
for your own machine.

If you want to install a module you can now either place the module in one of those
locations or use the `Install-Module` cmdlet.

### Copying Modules to `$env:PSModulePath`

A simple Module looks something like this:

```
ModuleName
+--ModuleName.psd1
+--ModuleName.psm1
```

Copying the ModuleName folder in one of those Modules folders counts as installing
the module.

### Using `Install-Module`

Since we are not interested in simply deploying our modules as zip files, `Install-Module`
is the way to go.

To install a Module with install Module it must be within a registered PSRepository.

How to get it there will be explained in [Part 2][part2].

Using Install-Module works pretty much as you'd expect it:

{%- highlight powershell -%}
PS> Install-Module PSScriptAnalyzer -Scope CurrentUser
{%- endhighlight -%}

In the above example I'm installing the super awesome PSScriptAnalyzer Module which
helps me not producing my usual substandard code. I'm using `-Scope CurrentUser`
to restrict the installation to my account only because I'm to lazy to enter admin
credentials ;)

## Creating Modules

As shown above a Module is not much. In the most basic case a Module is a simple
`psm1` file containing some simple code:

{%- highlight powershell -%}
function Get-MyAwesomeName {
  return "jschpp"
}
Export-ModuleMember -Function Get-MyAwesomeName
{%- endhighlight -%}

Save this as `Get-MyAwesomeName.psm1` and you can import it using `Import-Module .\Get-MyAwesomeName.psm1`

But as you can see in the above example most module contain a `psd1` file. A psd1
file is a Powershell Data file. It's structure looks a lot like a powershell hash
table:

{%- highlight language -%}
@{
  key = "Value"
}
{%- endhighlight -%}

A new this data file is called Module Manifest and can be generated by the `New-ModuleManifest`
cmdlet:

```powershell
#
# Module manifest for module 'Test'
#
# Generated by: jschpp
#
# Generated on: 18.05.18
#

@{

# Script module or binary module file associated with this manifest.
# RootModule = ''

# Version number of this module.
ModuleVersion = '0.0.1'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = 'a9fdb99d-5a55-4ffc-aa35-a8fcfe2cd3ee'

# Author of this module
Author = 'jschpp'

# Company or vendor of this module
CompanyName = 'Unknown'

# Copyright statement for this module
Copyright = '(c) jschpp. All rights reserved.'

# Description of the functionality provided by this module
# Description = ''

# Minimum version of the PowerShell engine required by this module
# PowerShellVersion = ''

# Name of the PowerShell host required by this module
# PowerShellHostName = ''

# Minimum version of the PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# DotNetFrameworkVersion = ''

# Minimum version of the common language runtime (CLR) required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
# CLRVersion = ''

# Processor architecture (None, X86, Amd64) required by this module
# ProcessorArchitecture = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = @()

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @()

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @()

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

    } # End of PSData hashtable

} # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}
```

The above was auto generated by calling `New-ModuleManifest Test.psd1`. As you can
see it doesn't contain powershell code by itself, but it has the line `RootModule = ''`
which should point to a `psm1` file which does the real work.

Nevertheless this file counts as code in the [restricted language mode][rlm] of
powershell. That means you can for example use `$true` and `$false` natively.

[psgallery]: https://www.powershellgallery.com/
[part2]: {{site.baseurl}}/nyp
[rlm]: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes?view=powershell-6#restricted-language-restrictedlanguage
